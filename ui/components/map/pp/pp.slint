import { ActiveTab, SunStage, LogMessage, MessageSource, LogLevel } from "../../../state.slint";
import { Globs, GlobCallbacks } from "../../../globals.slint";

import { TalkBaloon } from "../../common/talkbaloon.slint";

export component PovverPlant inherits Rectangle {
	width: 300px;
	height: 300px;

	property <SunStage> sun_stage: Globs.env.the_sun.stage;
	property <[LogMessage]> messages: Globs.category_messages.pp;
	property <int> last_msg_index: messages.length - 1;
	property <LogMessage> last_message: messages[last_msg_index];
	property <bool> baloon_shown: false;

	timer := Timer {
		interval: 100ms;
		running: false;
		triggered => {
			baloon_shown = !baloon_shown;
			self.running = false;
		}
	}

	changed last_msg_index => {
		baloon_shown = false;
		timer.running = true;
	}

	Image {
		source: sun_stage ==
			SunStage.Set ? @image-url("../../../images/pp-night.svg") :
			sun_stage == SunStage.Weak ?
			@image-url("../../../images/pp-dawndusk.svg") :
			@image-url("../../../images/pp.svg");
		width: 300px;
	}

	TalkBaloon {
		y: 30px;
		x: 320px;
		//For testing purposes
//		msg: {
//			message: "Hey there, just testing some stuff with this talking baloon here. For this I'll have to write some very long sentence into the baloon, so that I can measure distances and make this visually work in general. The length of this sentence is one of the essential parts of this test.",
//			source: UIMessageSource.PP,
//			level: UILogLevel.Critical,
//			factory_id: 0
//		};
		msg: last_message;
		is_shown: baloon_shown;
	}

	TouchArea {
		mouse-cursor: pointer;
		clicked => {
			Globs.active_cp_tab = ActiveTab.PP;
		}
	}
}